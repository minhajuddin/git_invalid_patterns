#!/bin/bash
# Source: https://github.com/minhajuddin/git_invalid_patterns
# Version 1.0.0

# this file has superpowers !!
# you can add this as a hook in a repository just by calling `git-check-invalid-patterns init`
# once you do that you can modify your `.invalid_patterns` file in the root of the
# repository to your needs

case $1 in
  init)
    # check existing hook and abort if already present
    if [[ -f .git/hooks/pre-commit  ]]; then
      echo "There is an existing pre-commit hook"
      echo "Please back it up and remove it"
      echo 'You can run `mv .git/hooks/pre-commit .git/hooks/pre-commit.bak`'
      echo "aborting"
      exit -1
    fi

    # create a new hook
    echo "creating a new hook .git/hooks/pre-commit"
    # create hook
    cat > .git/hooks/pre-commit <<EOS
#!/bin/bash
set -e
git-check-invalid-patterns
# --- you can add any other checks you want after this
EOS
    chmod +x .git/hooks/pre-commit

    # create an empty .invalid_patterns file
    if [[ ! -f .invalid_patterns ]]; then
      echo "creating a sample .invalid_patterns file"
      cat > .invalid_patterns <<EOS
# rows starting with "#" are ignored, empty lines are ignored

# rows starting with a backslash are considered to be exact matches
IO.inspect

# other patterns are used as PCRE regexes
debugger

# other patterns are used as PCRE regexes
IEx.pry
EOS
    fi
    echo "done"
    exit
    ;;
  help)
    echo 'Checks for invalid patterns in your git repository'
    echo '`git-check-invalid-patterns init` will create a hook to check invalid patterns'
    echo '`git-check-invalid-patterns` checks invalid patterns in the current staged files'
    exit
    ;;
  *)
    #fallthrough
esac

if [ $# -eq 2 ]; then
  oldrev=$1
  newrev=$2
else
  oldrev="HEAD"
  newrev="--staged"
fi

debug=0
pattern_file="$(pwd)/.invalid_patterns"

finish(){
  exit_code=$?
  if [ $exit_code -ne 0 ]; then
    echo "commit failed: an error occured, exit code: $exit_code"
  fi
  exit $exit_code
}
trap finish EXIT

log(){
  if [[ $debug = 1 ]]; then
    echo "> $1"
  fi
}

set -e

# redirect output to stderr
exec 1>&2


# read invalid patterns
readarray -t invalid_patterns < <(sed -e '/^#/d' -e '/^$/d' $pattern_file)

expose_offenders() {
  log "we found instances of $1 in your commit"
  # loop through all the staged files' changes
  git status --untracked-files=no --porcelain | cut -c4- | sed -e '/.invalid_patterns/d' | while read -r file; do
    for pattern in ${invalid_patterns[@]}; do
      log "checking file: '$file' for pattern: '$pattern'"
      # get diff for this file | extract just additions | remove metadata lines | search for the pattern &> dump output
      if (git diff $oldrev $newrev --unified=0 -- $file | grep "^\+" | grep --invert-match "^+++" | grep --fixed-strings "$pattern" &> /dev/null); then
        echo "found '$pattern' in '$file' diff"
      fi
    done
  done
  exit -1
}

if [ ! -f $pattern_file ]; then
  echo "ERROR: file: $pattern_file not found"
  exit -1
fi

sed -e '/^#/d' -e '/^$/d' $pattern_file | while read -r pattern; do
  log "testing for '$pattern'"
  # allow patterns in the invalid pattern file :)
  # if this succeeds it means we found an invalid pattern
  if (git diff $oldrev $newrev --unified=0 -- . ':!.invalid_patterns' | grep "^\+" | grep --invert-match "^+++" | grep --fixed-strings "$pattern" &> /dev/null); then
    # found ya!
    expose_offenders $pattern
  fi
done

echo "pre-commit checks passed!"
